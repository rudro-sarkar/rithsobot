<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat Section</title>
    <link rel="stylesheet" href="/chat.css">
</head>

<body>
    <nav class="chat-nav">
        <div class="profile-info">
            <img src="<%= authordata.author_avatar %>" alt="Profile Picture" class="profile-pic">
            <span class="username">
                <%= authordata.author_username %>
            </span>
        </div>
        <button class="end-chat-btn" id="end-chat-btn">Close Chat & End Session</button>
    </nav>

    <div class="chat-container" id="chat-container">

        <% contentArr.forEach(content=> { %>
            <% if (content.sender_id==authordata.author_username) { %>
                <div class="message other">
                    <p>
                        <%=content.content%>
                    </p>
                </div>
                <% } else if(content.sender_id==admin) {%>
                    <div class="message client">
                        <p>
                            <%=content.content%>
                        </p>
                    </div>
                    <% } %>
                        <% }) %>

    </div>


    <div class="input-container">
        <input type="text" class="message-input" id="msg_input" placeholder="Type your message..." required>
        <button class="block-btn" id="block_btn" title="Block User">ðŸš«</button>
        <button class="emoji-btn" id="emoji_btn" title="Presets">ðŸ“™</button>
        <button class="send-btn" id="msg_send">Send</button>
    </div>

    <form style="display: none;" id="deleteSupportSessionForm" action="/deletesupportsession" method="post">
        <input type="text" value="<%=authordata.author_username%>" name="authorUsername">
        <input type="text" value="<%=admin%>" name="adminUsername">
        <input type="text" value="<%=authordata.author_id%>" name="authorId">
    </form>

    <form style="display: none;" id="blockUserForm" action="/blockinguser" method="post">
        <input type="text" value="<%=authordata.author_username%>" name="authorUsername">
        <input type="text" value="<%=authordata.author_id%>" name="authorId">
    </form>

    <script src="/socket.io/socket.io.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>

        const socket = io();

        const chat_container = document.getElementById("chat-container");

        socket.on('new_msg', data => {
            const div = document.createElement('div');
            const p = document.createElement('p');

            p.innerText = data.content;

            const receiver_id = data.receiver_id;

            if (receiver_id == "<%=admin%>") {
                div.appendChild(p);
                div.classList.add('message', 'client');

                chat_container.appendChild(div);
                chat_container.scrollTop = chat_container.scrollHeight;
            }

        });

        socket.on('author_msg', data => {
            const content = data.content;
            const receiver = data.receiver;

            if (receiver == "<%=authordata.handler%>") {
                const div = document.createElement('div');
                const p = document.createElement('p');

                p.innerText = content;

                div.appendChild(p);
                div.classList.add('message', 'other');

                chat_container.appendChild(div);
                chat_container.scrollTop = chat_container.scrollHeight;
            } else {
                return;
            }
        });

        const msg_input = document.getElementById("msg_input");
        const msg_send = document.getElementById("msg_send");

        msg_send.addEventListener('click', e => {
            let msg = msg_input.value;
            let trimmed_msg = msg.trim();
            if (trimmed_msg) {
                e.preventDefault();
                socket.emit('msg_from_client', { sender: "<%=admin%>", content: trimmed_msg, authorId: "<%=authordata.author_id%>" });
                msg_input.value = "";
            }
        });

        msg_input.addEventListener('keyup', e => {
            if (e.code === 'Enter') {
                let msg = msg_input.value;
                let trimmed_msg = msg.trim();
                if (trimmed_msg) {
                    e.preventDefault();
                    socket.emit('msg_from_client', { sender: "<%=admin%>", content: trimmed_msg, authorId: "<%=authordata.author_id%>" });
                    msg_input.value = "";
                }
            }
        });

        socket.on('append_client_message', data => {
            const div = document.createElement('div');
            const p = document.createElement('p');

            p.innerText = data.content;

            div.appendChild(p);
            div.classList.add('message', 'client');
            chat_container.appendChild(div);
            chat_container.scrollTop = chat_container.scrollHeight;
        });

        const end_chat_btn = document.getElementById("end-chat-btn");

        const deleteSupportSessionForm = document.getElementById("deleteSupportSessionForm");

        end_chat_btn.addEventListener('click', e => {
            e.preventDefault();
            Swal.fire({
                title: "Are you sure?",
                text: "You won't be able to revert this!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes, End Session!"
            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire({
                        title: "Ending.....Please Wait",
                        text: "Redirecting to homepage......",
                        icon: "success"
                    });
                    setTimeout(() => {
                        deleteSupportSessionForm.submit();
                    }, 100);
                }
            });
        });

        const emoji_btn = document.getElementById("emoji_btn");

        emoji_btn.addEventListener('click', async e => {
            e.preventDefault();
            const { value: fruit } = await Swal.fire({
                title: "Select predefined message",
                input: "select",
                inputOptions: {
                    Greetings: {
                        welcome: "Good day sir, How can I help you?",
                        bye: "Closing the chat sir. Have a great day. No need to reply to this message."
                    },
                    Concerns: {
                        confinement: "We don't handle confinement appeals here. You can appeal a confinement from the server appeal section.",
                        spam: "Please don't request for assitance without any reason! Doing it can lead you to getting blocked.",
                        report: "Please provide me the username of the user whom you want to report."
                    },
                },
                inputPlaceholder: "Select a predefined message",
                showCancelButton: true,
                inputValidator: (value) => {
                    return new Promise((resolve) => {
                        if (value === "welcome") {
                            resolve();
                            msg_input.value = "Good day sir, How can I help you?"
                        } else if (value === "bye") {
                            resolve();
                            msg_input.value = "Closing the chat sir. Have a great day. No need to reply to this message.";
                        } else if (value === "confinement") {
                            resolve();
                            msg_input.value = "We don't handle confinement appeals here. You can appeal a confinement from the server appeal section.";
                        } else if (value === "spam") {
                            resolve();
                            msg_input.value = "Please don't request for assitance without any reason! Doing it can lead you to getting blocked.";
                        } else if (value === "report") {
                            resolve();
                            msg_input.value = "Please provide me the username of the user whom you want to report.";
                        } else {
                            resolve("Please select a predefined message or cancel!");
                        }
                    });
                }
            });
            if (fruit) {
                return;
            }
        });

        const block_btn = document.getElementById("block_btn");

        const blockUserForm = document.getElementById("blockUserForm");

        block_btn.addEventListener('click', e => {
            e.preventDefault();
            Swal.fire({
                title: "Block <%=authordata.author_username %> ?",
                text: "Blocking this user will prevent them from requesting assistance. They will remain blocked until manually unblocked from the dashboards restriction panel.",
                icon: "error",
                showCancelButton: true,
                confirmButtonColor: "#ff0000",
                cancelButtonColor: "#3f4042",
                confirmButtonText: "Block!"
            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire({
                        title: "Blocked!",
                        text: "Redirecting to dashboard ...",
                        icon: "warning"
                    });
                    blockUserForm.submit();
                }
            });
        });

    </script>
</body>

</html>
